{"name":"Efflux","tagline":"Rails gem for displaying live system commands","body":"Efflux\r\n======\r\n\r\nEfflux displays executes system commands and streams the output live to the browser, using Javascript Events. It has both a serverside rails component to make it easy to setup the command streaming and a javascript/css component for displaying the data retrieved from the socket.\r\n\r\nIt was created to provide an easy way to display log tails and deployment script outputs in maintenence systems for applications.\r\n\r\n## Usage\r\n\r\nAdd the efflux gem to your gemfile\r\n\r\n      gem 'efflux'\r\n\r\nTo use the client side component add the javascript and css files to your project.\r\n\r\nAdd the following to your application.js\r\n\r\n      //= require efflux\r\n      \r\nAdd the following to your application.css\r\n\r\n      *= require efflux\r\n\r\n### Controller Actions\r\n\r\nTo stream a command you must add a dedicated controller action for the browser to maintain a connection to. In a controller include the `Efflux::Stream` module and call `stream_cmd` from an action inside the controller.\r\n\r\n    class MyController < ApplicationController\r\n      include Efflux::Stream\r\n      \r\n      def stream_command\r\n        stream_cmd 'ls -la' \r\n      end\r\n    end\r\n\r\n### Client-side implmentation\r\n\r\nEfflux comes with a jQuery plugin to implement the client side functionality. For example:\r\n\r\nGiven the following html:\r\n\r\n    <div class=\".command-output\"></div>\r\n\r\nIt could be invoked through javascript like this:\r\n\r\n    $('.command-output').efflux({\r\n        url: '/command_stream'\r\n    });\r\n\r\nThe plugin supports the following options:\r\n\r\n* __title__ - A title that will display in the header of the window. (_optional_)\r\n* __url__ - The url to the streaming action. (_required_)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}